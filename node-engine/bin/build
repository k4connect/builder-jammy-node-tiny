#!/usr/bin/env bash
# CNB build phase: install ARM64 Node + npm install + declare default web process
set -euo pipefail

# --- Paths & inputs
LAYERS_DIR="${CNB_LAYERS_DIR:-/layers}"
APP_DIR="${CNB_APP_DIR:-/workspace}"
ENGINE_LAYER="${LAYERS_DIR}/node-engine"
MODULES_LAYER="${LAYERS_DIR}/node-modules"

TARGET_OS="${CNB_TARGET_OS:-linux}"
TARGET_ARCH="${CNB_TARGET_ARCH:-arm64}"
NODE_VERSION_INPUT="${BP_NODE_VERSION:-22.*}"

log() { printf "\e[1;34m[buildpack]\e[0m %s\n" "$*"; }

# tiny helper
copy_tree() { mkdir -p "$2"; tar -C "$1" -cf - . | tar -C "$2" -xf -; }

# Resolve Node version (simple)
resolve_node_version() {
  local want="$1"
  if [[ "$want" == *"*"* ]]; then
    local major ver; major="${want%%.*}"
    ver="$(curl -fsSL https://nodejs.org/dist/index.json \
      | grep -o "\"version\":\"v${major}\.[0-9]\+\.[0-9]\+\"" \
      | sed -E 's/.*"v([0-9]+\.[0-9]+\.[0-9]+)".*/\1/' \
      | sort -V | tail -1 || true)"
    [[ -n "$ver" ]] || ver="${major}.19.0"
    echo "$ver"
  else
    echo "$want"
  fi
}

# --- Prepare layers
rm -rf "${ENGINE_LAYER}" "${MODULES_LAYER}" 2>/dev/null || true
mkdir -p "${ENGINE_LAYER}" "${MODULES_LAYER}" \
         "${ENGINE_LAYER}/env" "${ENGINE_LAYER}/env.launch" \
         "${MODULES_LAYER}/env.launch"

NODE_VERSION="$(resolve_node_version "$NODE_VERSION_INPUT")"
NODE_TARBALL="node-v${NODE_VERSION}-${TARGET_OS}-${TARGET_ARCH}.tar.xz"
NODE_URL="https://nodejs.org/dist/v${NODE_VERSION}/${NODE_TARBALL}"

log "Target: ${TARGET_OS}/${TARGET_ARCH}"
log "Node:   ${NODE_VERSION}"
log "URL:    ${NODE_URL}"

# --- Layer metadata
cat > "${ENGINE_LAYER}.toml" <<EOF
[types]
build = true
launch = true
cache = true
[metadata]
version = "${NODE_VERSION}"
arch = "${TARGET_ARCH}"
os = "${TARGET_OS}"
EOF

cat > "${MODULES_LAYER}.toml" <<'EOF'
[types]
build = false
launch = true
cache = true
EOF

# --- Install Node
tmp="$(mktemp -d)"; trap 'rm -rf "$tmp"' EXIT
curl -fsSL "${NODE_URL}" -o "${tmp}/${NODE_TARBALL}"
tar -xJf "${tmp}/${NODE_TARBALL}" -C "${tmp}"
mkdir -p "${ENGINE_LAYER}/node"
copy_tree "${tmp}/node-v${NODE_VERSION}-${TARGET_OS}-${TARGET_ARCH}" "${ENGINE_LAYER}/node"

# --- Expose Node for build & launch (NOTE: file contains ONLY the path)
NODE_HOME="${ENGINE_LAYER}/node"
echo "${NODE_HOME}"     > "${ENGINE_LAYER}/env/NODE_HOME"
echo "${NODE_HOME}"     > "${ENGINE_LAYER}/env.launch/NODE_HOME"
echo "${NODE_HOME}/bin" > "${ENGINE_LAYER}/env/PATH.prepend"
echo "${NODE_HOME}/bin" > "${ENGINE_LAYER}/env.launch/PATH.prepend"

# --- Make Node available now
export PATH="${NODE_HOME}/bin:${PATH}"

# --- Install production deps and layer node_modules
if [[ -f "${APP_DIR}/package-lock.json" || -f "${APP_DIR}/npm-shrinkwrap.json" ]]; then
  log "npm ci --omit=dev"
  npm ci --omit=dev --prefix "${APP_DIR}"
else
  log "npm install --omit=dev"
  npm install --omit=dev --prefix "${APP_DIR}"
fi

if [[ -d "${APP_DIR}/node_modules" ]]; then
  mkdir -p "${MODULES_LAYER}/node_modules"
  copy_tree "${APP_DIR}/node_modules" "${MODULES_LAYER}/node_modules"
  # Make layered node_modules discoverable at launch
  echo "${MODULES_LAYER}/node_modules" > "${MODULES_LAYER}/env.launch/NODE_PATH.prepend"
fi

# --- Declare default web process (invoker-style, no npm at launch)
LAUNCH_TOML="${LAYERS_DIR}/launch.toml"
cat > "$LAUNCH_TOML" <<EOF
[[processes]]
type = "web"
command = "${NODE_HOME}/bin/node"
args = ["${MODULES_LAYER}/node_modules/faas-js-runtime/bin/cli.js", "./index.js"]
default = true
EOF


log "Declared web process: node node_modules/faas-js-runtime/bin/cli.js ./index.js"

# --- Log versions (optional)
node -v
npm -v || true

# Optional BOM
cat <<EOF
[[bom]]
name = "node"
[bom.metadata]
version = "${NODE_VERSION}"
architecture = "${TARGET_ARCH}"
EOF

exit 0
